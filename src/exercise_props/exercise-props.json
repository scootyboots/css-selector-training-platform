{
  "exampleSingle": {
    "path": "/css-selector-training-platform/example-exercise/single",
    "promptHeader": "Selecting a Single Element",
    "explanationArray": ["Write a selector that targets the website's header element with the text \"#1 music blog\""],
    "correctSelectors": ["header h1"],
    "selectAll": false,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": true,
    "allowModalToggle": true,
    "hint": "you'll want to select the <h1> element inside of the <header>, or try using the id attribute \"logo\"",
    "modalHtml": "<h2>CSS Selector Training Platform - Skeleton</h2><p>This app was developed as an easily customizable app for training one's abilities with CSS selectors.</p><p>There are lots of great resources for learning CSS selectors out there (shout out to <a href=\"https://flukeout.github.io/\" target=\"_blank\">css-diner</a>), but this one is designed so you can customize the content to your particular use case.</p><p>Many people and organizations use CSS selectors to facilitate web scraping efforts, or for other Robotic Process Automation (RPA) related operations on the web.</p><p>Often the people tasked with writing these CSS selectors aren't developers and might be writing CSS selectors for the first time.</p><p>Maybe you scrape ecommerce data and want to train users on common formats and patterns used in ecommerce sites. Maybe you're only interested in scraping reddit and want to familiarize users with common classes and elements found there.</p><p>Here you will find some simple exercises to demonstrate how this app can be utilized.</p>"
  },
  "exampleAll": {
    "path": "/css-selector-training-platform/example-exercise/all",
    "promptHeader": "Select All Elements",
    "explanationArray": ["A CSS selector can potentially match multiple HTML elements on the same page.", "For this exercise, write a selector that targets each blog post's description text"],
    "correctSelectors": [".Blog-posts p"],
    "selectAll": true,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": false,
    "allowModalToggle": false,
    "hint": "look towards the first <p> in each Blog-post element - make sure you're not selecting paragraphs not associated with a blog post",
    "modalHtml": "<h2>Select All</h2><p>Use the <span class=\"--lowlight\">selectAll</span> property to change the answer checker's logic to look for the first element the selector hits or all elements the selector hits.</p><p>The answer checker will highlight the elements selected by the given CSS selector to help users work through via trial and error.</p>"
  },
  "exampleEveryOther": {
    "path": "/css-selector-training-platform/example-exercise/every-other",
    "promptHeader": "Every Other",
    "explanationArray": ["Write a selector that selects every other blog post"],
    "correctSelectors": [".Blog-post:nth-child(even)"],
    "selectAll": true,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": true,
    "allowModalToggle": true,
    "hint": "you'll need to utilize the :nth-child pseudo-class passing the \"even\" keyword - double check the provided links in the information modal",
    "modalHtml": "<h2>Pseudo-classes</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener noreferrer\">Pseudo-classes</a> are a powerful tool you can leverage to select elements in dynamic ways.</p><p>You can think of pseudo-classes as classes inherent to certain HTML elements that reflect something about the state of that element.</p><p>For this exercise you'll need to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child\" target=\"_blank\" rel=\"noopener noreferrer\">:nth-child()</a> pseudo-class.</p>",
    "devModalHtml": "<h2>Select Every Other</h2><p>Hints can be passed to the user through the <span class=\"--lowlight\">hint</span> prop.</p><p>Hints are displayed by hitting \"h\" on the keyboard or clicking the hint area under the answer input.</p>"
  },
  "exampleCondition": {
    "path": "/css-selector-training-platform/example-exercise/condition",
    "promptHeader": "Select Second",
    "explanationArray": ["Now select the second blog post without using a pseudo-class"],
    "correctSelectors": [".Blog-post + .Blog-post"],
    "selectAll": false,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": true,
    "allowModalToggle": true,
    "hint": "you will need to use the + combinator to select the adjacent sibling of the first blog post",
    "modalHtml": "<h2>Combinators</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#combinators\" target=\"_blank\" rel=\"noopener noreferrer\">Combinators</a> can be used to more precisely target your desired elements.</p>",
    "devModalHtml": "<h2>Optional Conditions</h2><p>By default this app checks the elements returned by the provided CSS selector against the elements selected from the <span class=\"--lowlight\">correctSelectors</span> array prop.</p><p>You can add an addition check before this comparison to see if the answer matches or doesn't match the specified regex in the optional <span class=\"--lowlight\">answerCondition</span> prop.</p>",
    "answerCondition": {"regex":":nth-child|:first-child","ifRegexMatchDontProceed":true}
  },
  "exampleConditionNoMatch": {
    "path": "/css-selector-training-platform/example-exercise/condition-no-match",
    "promptHeader": "Select Second",
    "explanationArray": ["Now use the same pseudo-class :nth-child to select just the second blog post"],
    "correctSelectors": [".Blog-post:nth-child(2)"],
    "selectAll": false,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": false,
    "allowModalToggle": false,
    "hint": "the :nth-child pseudo-class needs to be passed a number",
    "modalHtml": "<h2>Pseudo-classes</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\" target=\"_blank\" rel=\"noopener noreferrer\">Pseudo-classes</a> are a powerful tool you can leverage to select elements in dynamic ways.</p><p>You can think of pseudo-classes as classes inherent to certain HTML elements that reflect something about the state of that element.</p><p>For this exercise you'll need to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child\" target=\"_blank\" rel=\"noopener noreferrer\">:nth-child()</a> pseudo-class.</p>",
    "devModalHtml": "<h2>Optional Conditions</h2><p>By default this app checks the elements returned by the provided CSS selector against the elements selected from the <span class=\"--lowlight\">correctSelectors</span> array prop.</p><p>You can add an addition check before this comparison to see if the answer matches or doesn't match the specified regex in the optional <span class=\"--lowlight\">answerCondition</span> prop.</p>",
    "answerCondition": {"regex":":nth-child","ifRegexMatchDontProceed":false}
  },
  "exampleSelectAllAttributes": {
    "path": "/css-selector-training-platform/example-exercise/select-all-attributes",
    "promptHeader": "Select All by Attribute",
    "explanationArray": ["Write a selector that selects the images that start with \"new\" as their alt text"],
    "correctSelectors": ["main img[alt^=\"new-\"]"],
    "selectAll": true,
    "browserUrl": "www.music.blog",
    "iframeSrcKey": "blog",
    "modalDefaultDisplay": true,
    "allowModalToggle": true,
    "hint": "you will need to adjust the bracket syntax to perform a partial match - review the provided link in the information modal",
    "modalHtml": "<h2>Selecting Elements using their Attributes</h2><p>Using the id and class shorthand # and . are the most common when writing CSS selectors, but sometimes we might need to reference another of the HTML element's attributes.</p><p class=\"no-padding\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\" target=\"_blank\" rel=\"noopener noreferrer\">Attribute selectors</a> use a bracket syntax:</p><p class=\"no-padding\"><span class=\"--lowlight\">element[attribute]</span> or <span class=\"--lowlight\">element[attribute=\"attribute-value\"]</span> in order to specify the attribute's value.</p>"
  }
}